import Stepper from"./index";describe("Stepper",(()=>{let t;beforeAll((()=>{const e=document.createElement("div");e.setAttribute("id","fixture"),document.body.appendChild(e),t=document.getElementById("fixture")})),afterEach((()=>{t.innerHTML=""})),describe("constructor",(()=>{it("should create a stepper",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger" id="trigger1">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger" id="trigger2">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e);expect(e.classList.contains("linear")).toBe(!0),expect(s._steps.length).toEqual(2),expect(e.bsStepper).toEqual(s),expect(document.querySelector(".step").classList.contains("active")).toBe(!0),expect(document.getElementById("trigger1").getAttribute("aria-selected")).toEqual("true"),expect(document.getElementById("trigger2").getAttribute("aria-selected")).toEqual("false"),expect(s.options).toEqual({linear:!0,animation:!1,selectors:{steps:".step",trigger:".step-trigger",stepper:".bs-stepper"}})})),it("should do nothing if there is no step",(()=>{t.innerHTML='<div id="myStepper" class="bs-stepper"></div>';const e=document.getElementById("myStepper"),s=new Stepper(e);expect(e.classList.contains("linear")).toBe(!0),expect(s._steps.length).toEqual(0),expect(e.bsStepper).toEqual(s)})),it("should create a non linear stepper",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e,{linear:!1});expect(e.classList.contains("linear")).toBe(!1),expect(s._steps.length).toEqual(2),expect(document.querySelector(".step").classList.contains("active")).toBe(!0),expect(e.bsStepper).toEqual(s),expect(s._clickStepLinearListener).toBeUndefined(),expect(s._clickStepNonLinearListener).toBeTruthy(),expect(s.options).toEqual({linear:!1,animation:!1,selectors:{steps:".step",trigger:".step-trigger",stepper:".bs-stepper"}})})),it("should go to the next step when user click on a step for non linear stepper",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button id="trigger1" class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button id="trigger2" class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e,{linear:!1});document.querySelector("#trigger2").click(),expect(document.querySelector("#test1").classList.contains("active")).toBe(!1),expect(document.querySelector("#test2").classList.contains("active")).toBe(!0),expect(document.getElementById("trigger1").getAttribute("aria-selected")).toEqual("false"),expect(document.getElementById("trigger2").getAttribute("aria-selected")).toEqual("true"),expect(s._currentIndex).toEqual(1)})),it("should call preventDefault when user click on a step for linear stepper",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button id="trigger2" class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e),i=document.querySelector("#trigger2");i.removeAttribute("disabled");const n=document.createEvent("Event");n.initEvent("click",!0,!0),spyOn(n,"preventDefault"),i.dispatchEvent(n),expect(n.preventDefault).toHaveBeenCalled(),expect(s._currentIndex).toEqual(0)})),it("should create a stepper with fade animation",(e=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const s=document.getElementById("myStepper"),i=new Stepper(s,{animation:!0});setTimeout((()=>{expect(i.options).toEqual({linear:!0,animation:!0,selectors:{steps:".step",trigger:".step-trigger",stepper:".bs-stepper"}}),expect(document.querySelector("#test1").classList.contains("fade")).toBe(!0),expect(document.querySelector("#test2").classList.contains("fade")).toBe(!0),e()}),10)})),it("should add event listeners on triggers",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button id="trigger1" class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button id="trigger2" class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.querySelector("#trigger1"),s=document.querySelector("#trigger2");spyOn(e,"addEventListener"),spyOn(s,"addEventListener");const i=document.getElementById("myStepper"),n=new Stepper(i);expect(e.addEventListener).toHaveBeenCalled(),expect(s.addEventListener).toHaveBeenCalled(),expect(i.bsStepper).toEqual(n)})),it("should allow css selector configuration",(()=>{t.innerHTML=['<div id="myStepper" class="custom-bs-stepper">','  <div class="custom-step" data-target="#test1">','    <button id="trigger1" class="custom-step-trigger">1</button>',"  </div>",'  <div class="custom-step" data-target="#test2">','    <button id="trigger2" class="custom-step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e,{selectors:{steps:".custom-step",trigger:".custom-step-trigger",stepper:".custom-bs-stepper"}});expect(s.options).toEqual({linear:!0,animation:!1,selectors:{steps:".custom-step",trigger:".custom-step-trigger",stepper:".custom-bs-stepper"}})}))})),describe("next",(()=>{it("should go to the next step",(e=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const s=document.getElementById("myStepper"),i=new Stepper(s);s.addEventListener("show.bs-stepper",(function(t){expect(t.detail.indexStep).toEqual(1),expect(t.detail.to).toEqual(1),expect(t.detail.from).toEqual(0)})),s.addEventListener("shown.bs-stepper",(function(t){expect(t.detail.indexStep).toEqual(1),expect(t.detail.to).toEqual(1),expect(t.detail.from).toEqual(0),expect(document.querySelector("#test1").classList.contains("active")).toBe(!1),expect(document.querySelector("#test2").classList.contains("active")).toBe(!0),e()})),i.next()})),it("should go to the next step with css selector configuration",(e=>{t.innerHTML=['<div id="myStepper" class="custom-bs-stepper">','  <div class="custom-step" data-target="#test1">','    <button id="trigger1" class="custom-step-trigger">1</button>',"  </div>",'  <div class="custom-step" data-target="#test2">','    <button id="trigger2" class="custom-step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const s=document.getElementById("myStepper"),i=new Stepper(s,{selectors:{steps:".custom-step",trigger:".custom-step-trigger",stepper:".custom-bs-stepper"}});expect(i.options).toEqual({linear:!0,animation:!1,selectors:{steps:".custom-step",trigger:".custom-step-trigger",stepper:".custom-bs-stepper"}}),s.addEventListener("show.bs-stepper",(function(t){expect(t.detail.indexStep).toEqual(1)})),s.addEventListener("shown.bs-stepper",(function(t){expect(t.detail.indexStep).toEqual(1),expect(document.querySelector("#test1").classList.contains("active")).toBe(!1),expect(document.querySelector("#test2").classList.contains("active")).toBe(!0),e()})),i.next()})),it("should not go to the next step if the show event is default prevented",(e=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const s=document.getElementById("myStepper"),i=new Stepper(s),n={show(t){t.preventDefault(),expect(t.detail.indexStep).toEqual(1),setTimeout((()=>{expect(n.shown).not.toHaveBeenCalled(),expect(i._currentIndex).toEqual(0),e()}),10)},shown(){console.warn("shown called but it should not be the case")}};spyOn(n,"shown"),s.addEventListener("show.bs-stepper",n.show),s.addEventListener("shown.bs-stepper",n.shown),i.next()})),it("should stay at the end if we call next",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e);s.next(),s.next(),expect(document.querySelector("#test1").classList.contains("active")).toBe(!1),expect(document.querySelector("#test2").classList.contains("active")).toBe(!0)})),it("should keep block class on previous steps for vertical stepper without fade",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper vertical">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper");new Stepper(e).next(),expect(document.querySelector("#test2").classList.contains("active")).toBe(!0),expect(document.querySelector("#test2").classList.contains("dstepper-block")).toBe(!0)}))})),describe("previous",(()=>{it("should return to the previous step",(e=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const s=document.getElementById("myStepper"),i=new Stepper(s),n=document.querySelector("#test1"),r=document.querySelector("#test2");i.next(),expect(n.classList.contains("active")).toBe(!1),expect(r.classList.contains("active")).toBe(!0),s.addEventListener("show.bs-stepper",(function(t){expect(t.detail.indexStep).toEqual(0),expect(t.detail.to).toEqual(0),expect(t.detail.from).toEqual(1)})),s.addEventListener("shown.bs-stepper",(function(t){expect(t.detail.indexStep).toEqual(0),expect(t.detail.to).toEqual(0),expect(t.detail.from).toEqual(1),expect(n.classList.contains("active")).toBe(!0),expect(r.classList.contains("active")).toBe(!1),e()})),i.previous()})),it("should stay at the first step if previous called",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.querySelector("#test1"),s=document.querySelector("#test2"),i=document.getElementById("myStepper");new Stepper(i).previous(),expect(e.classList.contains("active")).toBe(!0),expect(s.classList.contains("active")).toBe(!1)}))})),describe("to",(()=>{it("should go to the step number",(e=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const s=document.getElementById("myStepper"),i=new Stepper(s),n=document.querySelector("#test1"),r=document.querySelector("#test2");s.addEventListener("show.bs-stepper",(t=>{expect(t.detail.indexStep).toEqual(1),expect(t.detail.to).toEqual(1),expect(t.detail.from).toEqual(0)})),s.addEventListener("shown.bs-stepper",(t=>{expect(t.detail.indexStep).toEqual(1),expect(t.detail.to).toEqual(1),expect(t.detail.from).toEqual(0),expect(n.classList.contains("active")).toBe(!1),expect(r.classList.contains("active")).toBe(!0),e()})),i.to(2)})),it("should handle wrong inputs",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div class="step" data-target="#test3">','    <button class="step-trigger">3</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>','  <div id="test3">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e),i=document.querySelector("#test1"),n=document.querySelector("#test2"),r=document.querySelector("#test3");s.to(-5),expect(i.classList.contains("active")).toBe(!0),expect(n.classList.contains("active")).toBe(!1),expect(r.classList.contains("active")).toBe(!1),s.to(2),expect(i.classList.contains("active")).toBe(!1),expect(n.classList.contains("active")).toBe(!0),expect(r.classList.contains("active")).toBe(!1),s.to(s._steps.length+1),expect(i.classList.contains("active")).toBe(!0),expect(n.classList.contains("active")).toBe(!1),expect(r.classList.contains("active")).toBe(!1)}))})),describe("reset",(()=>{it("should return to the first step",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e),i=document.querySelector("#test1"),n=document.querySelector("#test2");s.next(),expect(i.classList.contains("active")).toBe(!1),expect(n.classList.contains("active")).toBe(!0),s.reset(),expect(i.classList.contains("active")).toBe(!0),expect(n.classList.contains("active")).toBe(!1)}))})),describe("destroy",(()=>{it("should clear properties",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e);expect(e.bsStepper).toEqual(s),expect(s._element).toEqual(e),expect(s._currentIndex).toEqual(0),expect(s._steps.length).toEqual(2),expect(s._stepsContents.length).toEqual(2),expect(s._clickStepLinearListener).toBeTruthy(),expect(s._clickStepNonLinearListener).toBeUndefined(),s.destroy(),expect(e.bsStepper).toBeUndefined(),expect(s._element).toBeUndefined(),expect(s._currentIndex).toBeUndefined(),expect(s._steps).toBeUndefined(),expect(s._stepsContents).toBeUndefined(),expect(s._clickStepLinearListener).toBeUndefined(),expect(s._clickStepNonLinearListener).toBeUndefined()})),it("should remove event listeners on triggers",(()=>{t.innerHTML=['<div id="myStepper" class="bs-stepper">','  <div class="step" data-target="#test1">','    <button id="trigger1" class="step-trigger">1</button>',"  </div>",'  <div class="step" data-target="#test2">','    <button id="trigger2" class="step-trigger">2</button>',"  </div>",'  <div id="test1">1</div>','  <div id="test2">2</div>',"</div>"].join("");const e=document.getElementById("myStepper"),s=new Stepper(e,{linear:!1}),i=document.querySelector("#trigger1"),n=document.querySelector("#trigger2");spyOn(i,"removeEventListener"),spyOn(n,"removeEventListener"),s.destroy(),expect(i.removeEventListener).toHaveBeenCalled(),expect(n.removeEventListener).toHaveBeenCalled()}))}))}));